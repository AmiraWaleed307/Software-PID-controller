
MOTORS_PID_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000128e  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d5  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb5  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001099  00000000  00000000  00003c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_7>
  20:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_8>
  24:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_14>
  3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_15>
  40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main>

000000a8 <__vector_21>:
	SET_BIT(ADC_REG->ADC_DIDR0,Channel);
	
}

void ADC_VECTOR_ISR_ADC (void)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	
	if (PADC_void_CallBack != 0)
  ca:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PADC_void_CallBack>
  ce:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PADC_void_CallBack+0x1>
  d2:	30 97       	sbiw	r30, 0x00	; 0
  d4:	81 f0       	breq	.+32     	; 0xf6 <__vector_21+0x4e>
	{
		u16 Local_Result = 0;
		if (PADC_Conversion_Resolution == ADC_8BIT)
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PADC_Conversion_Resolution>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	21 f4       	brne	.+8      	; 0xe6 <__vector_21+0x3e>
		{
			Local_Result = ADC_REG->ADC_ADCH;
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <__vector_21+0x4c>
		}
		else
		{
			Local_Result = ADC_REG->ADC_ADCL;
  e6:	a8 e7       	ldi	r26, 0x78	; 120
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	8c 91       	ld	r24, X
			Local_Result |= ((u16)ADC_REG->ADC_ADCH)<<8;
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	2c 91       	ld	r18, X
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	92 2b       	or	r25, r18
		}
		
		PADC_void_CallBack(Local_Result);
  f4:	09 95       	icall
	}
	if (PADC_FREE_RUNNING_MODE)
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	88 23       	and	r24, r24
  fc:	29 f0       	breq	.+10     	; 0x108 <__vector_21+0x60>
		SET_BIT(ADC_REG->ADC_ADCSRA,6);
  fe:	e8 e7       	ldi	r30, 0x78	; 120
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	82 81       	ldd	r24, Z+2	; 0x02
 104:	80 64       	ori	r24, 0x40	; 64
 106:	82 83       	std	Z+2, r24	; 0x02
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_14>:
		return 0 ;
	}
}

void TIM0_VECTOR_ISR_TIM0_COMPA  (void)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	if (p_8OutCompareMatchACallBack[TIM0]!=0)
 14c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <p_8OutCompareMatchACallBack>
 150:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <p_8OutCompareMatchACallBack+0x1>
 154:	30 97       	sbiw	r30, 0x00	; 0
 156:	09 f0       	breq	.+2      	; 0x15a <__vector_14+0x30>
	{
		p_8OutCompareMatchACallBack[TIM0]() ;
 158:	09 95       	icall
	}
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_15>:


void TIM0_VECTOR_ISR_TIM0_COMPB  (void)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	if (p_8OutCompareMatchBCallBack[TIM0]!=0)
 19e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <p_8OutCompareMatchBCallBack>
 1a2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <p_8OutCompareMatchBCallBack+0x1>
 1a6:	30 97       	sbiw	r30, 0x00	; 0
 1a8:	09 f0       	breq	.+2      	; 0x1ac <__vector_15+0x30>
	{
		p_8OutCompareMatchBCallBack[TIM0]() ;
 1aa:	09 95       	icall
	}
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_16>:


void TIM0_VECTOR_ISR_TIM0_OVF  (void)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	if (p_8OverFlowCallBack[TIM0]!=0)
 1f4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <p_8OverFlowCallBack>
 1f8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <p_8OverFlowCallBack+0x1>
 1fc:	30 97       	sbiw	r30, 0x00	; 0
 1fe:	d1 f1       	breq	.+116    	; 0x274 <__vector_16+0xa6>
	{
		p_8OVFCounter[TIM0] ++ ;
 200:	c2 e1       	ldi	r28, 0x12	; 18
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	88 81       	ld	r24, Y
 206:	99 81       	ldd	r25, Y+1	; 0x01
 208:	aa 81       	ldd	r26, Y+2	; 0x02
 20a:	bb 81       	ldd	r27, Y+3	; 0x03
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	a1 1d       	adc	r26, r1
 210:	b1 1d       	adc	r27, r1
 212:	88 83       	st	Y, r24
 214:	99 83       	std	Y+1, r25	; 0x01
 216:	aa 83       	std	Y+2, r26	; 0x02
 218:	bb 83       	std	Y+3, r27	; 0x03
		if ((p_8PeriodicInterrupt_OVF_NUM[TIM0] == p_8OVFCounter[TIM0] ) || p_8PeriodicInterrupt_OVF_NUM[TIM0]==0 )
 21a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <p_8PeriodicInterrupt_OVF_NUM>
 21e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <p_8PeriodicInterrupt_OVF_NUM+0x1>
 222:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <p_8PeriodicInterrupt_OVF_NUM+0x2>
 226:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <p_8PeriodicInterrupt_OVF_NUM+0x3>
 22a:	84 17       	cp	r24, r20
 22c:	95 07       	cpc	r25, r21
 22e:	a6 07       	cpc	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	21 f0       	breq	.+8      	; 0x23c <__vector_16+0x6e>
 234:	45 2b       	or	r20, r21
 236:	46 2b       	or	r20, r22
 238:	47 2b       	or	r20, r23
 23a:	e1 f4       	brne	.+56     	; 0x274 <__vector_16+0xa6>
		{
		p_8OverFlowCallBack[TIM0]() ;
 23c:	09 95       	icall
		p_8OVFCounter[TIM0] = 0 ;
 23e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <p_8OVFCounter>
 242:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <p_8OVFCounter+0x1>
 246:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <p_8OVFCounter+0x2>
 24a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <p_8OVFCounter+0x3>
		if(p_8PeriodicInterrupt_OVF_NUM[TIM0]!=0 && p_8Mode[TIM0]==TIM_NORMAL_MODE)
 24e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <p_8PeriodicInterrupt_OVF_NUM>
 252:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <p_8PeriodicInterrupt_OVF_NUM+0x1>
 256:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <p_8PeriodicInterrupt_OVF_NUM+0x2>
 25a:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <p_8PeriodicInterrupt_OVF_NUM+0x3>
 25e:	89 2b       	or	r24, r25
 260:	8a 2b       	or	r24, r26
 262:	8b 2b       	or	r24, r27
 264:	39 f0       	breq	.+14     	; 0x274 <__vector_16+0xa6>
 266:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <p_8Mode>
 26a:	81 11       	cpse	r24, r1
 26c:	03 c0       	rjmp	.+6      	; 0x274 <__vector_16+0xa6>
			TIMER0_REG->TCNT = p_8PeriodicInterrupt_Preload[TIM0] ;
 26e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <p_8PeriodicInterrupt_Preload>
 272:	86 bd       	out	0x26, r24	; 38
		}
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_7>:


void TIM2_VECTOR_ISR_TIM2_COMPA  (void)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	if (p_8OutCompareMatchACallBack[TIM2]!=0)
 2bc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <p_8OutCompareMatchACallBack+0x2>
 2c0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <p_8OutCompareMatchACallBack+0x3>
 2c4:	30 97       	sbiw	r30, 0x00	; 0
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_7+0x30>
	{
		p_8OutCompareMatchACallBack[TIM2]() ;
 2c8:	09 95       	icall
	}

}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_8>:


void TIM2_VECTOR_ISR_TIM2_COMPB  (void)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	if (p_8OutCompareMatchBCallBack[TIM2]!=0)
 30e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <p_8OutCompareMatchBCallBack+0x2>
 312:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <p_8OutCompareMatchBCallBack+0x3>
 316:	30 97       	sbiw	r30, 0x00	; 0
 318:	09 f0       	breq	.+2      	; 0x31c <__vector_8+0x30>
	{
		p_8OutCompareMatchBCallBack[TIM2]() ;
 31a:	09 95       	icall
	}
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_9>:


void TIM2_VECTOR_ISR_TIM2_OVF  (void)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	if (p_8OverFlowCallBack[TIM2]!=0)
 364:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <p_8OverFlowCallBack+0x2>
 368:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <p_8OverFlowCallBack+0x3>
 36c:	30 97       	sbiw	r30, 0x00	; 0
 36e:	d1 f1       	breq	.+116    	; 0x3e4 <__vector_9+0xa6>
	{
		p_8OVFCounter[TIM2] ++ ;
 370:	c2 e1       	ldi	r28, 0x12	; 18
 372:	d1 e0       	ldi	r29, 0x01	; 1
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	ae 81       	ldd	r26, Y+6	; 0x06
 37a:	bf 81       	ldd	r27, Y+7	; 0x07
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	a1 1d       	adc	r26, r1
 380:	b1 1d       	adc	r27, r1
 382:	8c 83       	std	Y+4, r24	; 0x04
 384:	9d 83       	std	Y+5, r25	; 0x05
 386:	ae 83       	std	Y+6, r26	; 0x06
 388:	bf 83       	std	Y+7, r27	; 0x07
		if ((p_8PeriodicInterrupt_OVF_NUM[TIM2] == p_8OVFCounter[TIM2] ) || p_8PeriodicInterrupt_OVF_NUM[TIM2]==0 )
 38a:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <p_8PeriodicInterrupt_OVF_NUM+0x4>
 38e:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <p_8PeriodicInterrupt_OVF_NUM+0x5>
 392:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <p_8PeriodicInterrupt_OVF_NUM+0x6>
 396:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <p_8PeriodicInterrupt_OVF_NUM+0x7>
 39a:	84 17       	cp	r24, r20
 39c:	95 07       	cpc	r25, r21
 39e:	a6 07       	cpc	r26, r22
 3a0:	b7 07       	cpc	r27, r23
 3a2:	21 f0       	breq	.+8      	; 0x3ac <__vector_9+0x6e>
 3a4:	45 2b       	or	r20, r21
 3a6:	46 2b       	or	r20, r22
 3a8:	47 2b       	or	r20, r23
 3aa:	e1 f4       	brne	.+56     	; 0x3e4 <__vector_9+0xa6>
		{
		p_8OverFlowCallBack[TIM2]() ;
 3ac:	09 95       	icall
		p_8OVFCounter[TIM2] = 0 ;
 3ae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <p_8OVFCounter+0x4>
 3b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <p_8OVFCounter+0x5>
 3b6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <p_8OVFCounter+0x6>
 3ba:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <p_8OVFCounter+0x7>
		if(p_8PeriodicInterrupt_OVF_NUM[TIM2]!=0 && p_8Mode[TIM2]==TIM_NORMAL_MODE)
 3be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <p_8PeriodicInterrupt_OVF_NUM+0x4>
 3c2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <p_8PeriodicInterrupt_OVF_NUM+0x5>
 3c6:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <p_8PeriodicInterrupt_OVF_NUM+0x6>
 3ca:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <p_8PeriodicInterrupt_OVF_NUM+0x7>
 3ce:	89 2b       	or	r24, r25
 3d0:	8a 2b       	or	r24, r26
 3d2:	8b 2b       	or	r24, r27
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <__vector_9+0xa6>
 3d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <p_8Mode+0x1>
 3da:	81 11       	cpse	r24, r1
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <__vector_9+0xa6>
			TIMER0_REG->TCNT = p_8PeriodicInterrupt_Preload[TIM2] ;
 3de:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <p_8PeriodicInterrupt_Preload+0x1>
 3e2:	86 bd       	out	0x26, r24	; 38
		}
	}
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
